import numpy as np
import pandas as pd
from sklearn.model_selection import GridSearchCV, TimeSeriesSplit
from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor, AdaBoostRegressor
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from datetime import datetime
import os

# 提供的日期和号码数据
dates = [
            "2024/12/29", "2024/12/28", "2024/12/27", "2024/12/26",
            "2024/12/25", "2024/12/24", "2024/12/23", "2024/12/22", "2024/12/21",
            "2024/12/20", "2024/12/19", "2024/12/18", "2024/12/17", "2024/12/16",
            "2024/12/15", "2024/12/14", "2024/12/13", "2024/12/12", "2024/12/11",
            "2024/12/10", "2024/12/9", "2024/12/8", "2024/12/7","2024/12/6",
            "2024/12/5", "2024/12/4", "2024/12/3", "2024/12/2", "2024/12/1",
            "2024/11/30", "2024/11/29", "2024/11/28", "2024/11/27", "2024/11/26",
            "2024/11/25", "2024/11/24", "2024/11/23", "2024/11/22", "2024/11/21",
            "2024/11/20", "2024/11/19", "2024/11/18", "2024/11/17", "2024/11/16",
            "2024/11/15", "2024/11/14", "2024/11/13", "2024/11/12", "2024/11/11",
            "2024/11/10", "2024/11/9", "2024/11/8", "2024/11/7", "2024/11/6",
            "2024/11/5", "2024/11/4", "2024/11/3", "2024/11/2", "2024/11/1",
            "2024/10/31", "2024/10/30", "2024/10/29", "2024/10/28", "2024/10/27",
            "2024/10/26", "2024/10/25", "2024/10/24", "2024/10/23", "2024/10/22",
            "2024/10/21", "2024/10/20", "2024/10/19", "2024/10/18", "2024/10/17",
            "2024/10/16", "2024/10/15", "2024/10/14", "2024/10/13", "2024/10/12",
            "2024/10/11", "2024/10/10", "2024/10/9", "2024/10/8", "2024/10/7",
            "2024/10/6", "2024/10/5", "2024/9/30", "2024/9/29", "2024/9/28",
            "2024/9/27", "2024/9/26", "2024/9/25", "2024/9/24", "2024/9/23",
            "2024/9/22", "2024/9/21", "2024/9/20", "2024/9/19", "2024/9/18",
            "2024/9/17", "2024/9/16", "2024/9/15", "2024/9/14", "2024/9/13",
            "2024/9/12", "2024/9/11", "2024/9/10", "2024/9/9", "2024/9/8",
            "2024/9/7", "2024/9/6", "2024/9/5", "2024/9/4", "2024/9/3",
            "2024/9/2", "2024/9/1", "2024/8/31", "2024/8/30", "2024/8/29",
            "2024/8/28", "2024/8/27", "2024/8/26", "2024/8/25", "2024/8/24",
            "2024/8/23", "2024/8/22", "2024/8/21", "2024/8/20", "2024/8/19",
            "2024/8/18", "2024/8/17", "2024/8/16", "2024/8/15", "2024/8/14",
            "2024/8/13", "2024/8/12", "2024/8/11", "2024/8/10", "2024/8/9",
            "2024/8/8", "2024/8/7", "2024/8/6", "2024/8/5", "2024/8/4",
            "2024/8/3", "2024/8/2", "2024/8/1", "2024/7/31", "2024/7/30",
            "2024/7/29", "2024/7/28", "2024/7/27", "2024/7/26", "2024/7/25",
            "2024/7/24", "2024/7/23", "2024/7/22", "2024/7/21", "2024/7/20",
            "2024/7/19", "2024/7/18", "2024/7/17", "2024/7/16", "2024/7/15",
            "2024/7/14", "2024/7/13", "2024/7/12", "2024/7/11", "2024/7/10",
            "2024/7/9", "2024/7/8", "2024/7/7", "2024/7/6", "2024/7/5",
            "2024/7/4", "2024/7/3", "2024/7/2", "2024/7/1", "2024/6/30",
            "2024/6/29", "2024/6/28", "2024/6/27", "2024/6/26", "2024/6/25",
            "2024/6/24", "2024/6/23", "2024/6/22", "2024/6/21", "2024/6/20",
            "2024/6/19", "2024/6/18", "2024/6/17", "2024/6/16", "2024/6/15",
            "2024/6/14", "2024/6/13", "2024/6/12", "2024/6/11", "2024/6/10",
            "2024/6/9", "2024/6/8", "2024/6/7", "2024/6/6", "2024/6/5",
            "2024/6/4", "2024/6/3", "2024/6/2", "2024/6/1", "2024/5/31",
            "2024/5/30", "2024/5/29", "2024/5/28", "2024/5/27", "2024/5/26",
            "2024/5/25", "2024/5/24", "2024/5/23", "2024/5/22", "2024/5/21",
            "2024/5/20", "2024/5/19", "2024/5/18", "2024/5/17", "2024/5/16",
            "2024/5/15", "2024/5/14", "2024/5/13", "2024/5/12", "2024/5/11",
            "2024/5/10", "2024/5/9", "2024/5/8", "2024/5/7", "2024/5/6",
            "2024/5/5", "2024/5/4", "2024/5/3", "2024/5/2", "2024/5/1",
            "2024/4/30", "2024/4/29", "2024/4/28", "2024/4/27", "2024/4/26",
            "2024/4/25", "2024/4/24", "2024/4/23", "2024/4/22", "2024/4/21",
            "2024/4/20", "2024/4/19", "2024/4/18", "2024/4/17", "2024/4/16",
            "2024/4/15", "2024/4/14", "2024/4/13", "2024/4/12", "2024/4/11",
            "2024/4/10", "2024/4/9", "2024/4/8", "2024/4/7", "2024/4/6",
            "2024/4/5", "2024/4/4", "2024/4/3", "2024/4/2", "2024/4/1",
            "2024/3/31", "2024/3/30", "2024/3/29", "2024/3/28", "2024/3/27",
            "2024/3/26", "2024/3/25", "2024/3/24", "2024/3/23", "2024/3/22",
            "2024/3/21", "2024/3/20", "2024/3/19", "2024/3/18", "2024/3/17",
            "2024/3/16", "2024/3/15", "2024/3/14", "2024/3/13", "2024/3/12",
            "2024/3/11", "2024/3/10", "2024/3/9", "2024/3/8", "2024/3/7",
            "2024/3/6", "2024/3/5", "2024/3/4", "2024/3/3", "2024/3/2",
            "2024/3/1", "2024/2/29", "2024/2/28", "2024/2/27", "2024/2/26",
            "2024/2/25", "2024/2/24", "2024/2/23", "2024/2/22", "2024/2/21",
            "2024/2/20", "2024/2/19", "2024/2/18", "2024/2/17", "2024/2/16",
            "2024/2/15", "2024/2/14", "2024/2/13", "2024/2/12", "2024/2/11",
            "2024/2/10", "2024/2/9", "2024/2/8", "2024/2/7", "2024/2/6",
            "2024/2/5", "2024/2/4", "2024/2/3", "2024/2/2", "2024/2/1",
            "2024/1/31", "2024/1/30", "2024/1/29", "2024/1/28", "2024/1/27",
            "2024/1/26", "2024/1/25", "2024/1/24", "2024/1/23", "2024/1/22",
            "2024/1/21", "2024/1/20", "2024/1/19", "2024/1/18", "2024/1/17",
            "2024/1/16", "2024/1/15", "2024/1/14", "2024/1/13", "2024/1/12",
            "2024/1/11", "2024/1/10", "2024/1/9", "2024/1/8", "2024/1/7",
            "2024/1/6", "2024/1/5", "2024/1/4", "2024/1/3", "2024/1/2",
            "2024/1/1"
        ]

# 完整的号码列表，每个子列表包含四个整数
numbers = [
            [2, 2, 0, 4], [9, 0, 7, 3],
            [1, 9, 2, 0], [8, 9, 3, 4], [6, 7, 7, 2],
            [6, 2, 0, 3], [5, 4, 6, 1], [4, 8, 1, 1],
            [0, 8, 4, 8], [6, 5, 3, 4], [0, 3, 1, 7],
            [9, 1, 8, 6], [1, 5, 5, 5], [1, 7, 2, 5],
            [2, 4, 9, 6], [4, 9, 9, 0], [7, 4, 6, 8],
            [8, 4, 8, 5], [6, 7, 9, 5], [7, 1, 2, 2],
            [8, 1, 1, 3], [1, 4, 7, 8], [1, 2, 5, 0],
            [1, 3, 4, 2], [2, 5, 7, 0], [0, 2, 3, 0],
            [6, 3, 0, 1], [9, 1, 4, 7], [6, 7, 8, 5],
            [0, 5, 0, 0], [8, 6, 3, 4], [7, 9, 3, 3],
            [2, 4, 3, 9], [3, 5, 5, 7], [3, 3, 2, 7],
            [0, 7, 1, 1], [0, 8, 0, 2], [4, 7, 1, 1],
            [4, 1, 3, 2], [5, 3, 3, 1], [7, 1, 8, 9],
            [4, 8, 3, 0], [8, 4, 3, 9], [5, 8, 2, 1],
            [5, 0, 8, 8], [8, 4, 1, 8], [4, 2, 5, 3],
            [2, 0, 1, 9], [3, 9, 8, 0], [8, 7, 7, 3],
            [9, 3, 3, 3], [5, 8, 1, 0], [6, 8, 0, 8],
            [0, 3, 7, 1], [8, 9, 8, 0], [5, 5, 2, 5],
            [7, 0, 1, 9], [0, 4, 4, 8], [0, 3, 0, 0],
            [3, 4, 0, 4], [0, 0, 4, 4], [0, 0, 6, 4],
            [8, 1, 0, 9], [9, 4, 5, 6], [1, 5, 6, 7],
            [3, 4, 7, 4], [0, 3, 4, 6], [2, 8, 5, 5],
            [9, 0, 5, 5], [4, 6, 5, 0], [8, 5, 9, 7],
            [8, 8, 6, 7], [1, 3, 4, 4], [6, 2, 3, 6],
            [0, 8, 8, 7], [6, 8, 1, 3], [2, 7, 4, 8],
            [8, 1, 2, 3], [4, 3, 6, 9], [3, 9, 5, 7],
            [8, 0, 1, 6], [3, 2, 4, 3], [8, 3, 1, 3],
            [8, 4, 1, 7], [1, 4, 3, 4], [7, 0, 1, 0],
            [3, 4, 7, 3], [4, 0, 4, 8], [2, 1, 6, 4],
            [1, 9, 5, 9], [5, 2, 3, 2], [4, 4, 4, 6],
            [6, 9, 0, 5], [0, 0, 8, 6], [5, 4, 9, 1],
            [1, 5, 5, 8], [4, 2, 3, 1], [1, 4, 8, 3],
            [7, 0, 0, 5], [3, 5, 6, 2], [6, 0, 6, 9],
            [1, 9, 8, 3], [9, 5, 4, 3], [4, 3, 4, 8],
            [8, 1, 6, 4], [1, 8, 4, 9], [3, 6, 8, 9],
            [9, 1, 6, 3], [1, 8, 8, 9], [0, 6, 3, 9],
            [8, 1, 5, 2], [1, 6, 8, 4], [4, 3, 0, 6],
            [3, 5, 6, 8], [3, 6, 7, 9], [9, 5, 4, 1],
            [2, 7, 5, 9], [4, 9, 8, 4], [2, 9, 7, 6],
            [6, 9, 6, 4], [0, 8, 8, 3], [9, 2, 6, 1],
            [2, 7, 4, 1], [9, 9, 5, 1], [2, 3, 2, 3],
            [7, 5, 8, 6], [8, 3, 5, 2], [5, 4, 9, 1],
            [9, 9, 3, 3], [5, 0, 0, 5], [7, 2, 4, 1],
            [9, 7, 1, 7], [2, 9, 1, 7], [1, 1, 1, 0],
            [8, 4, 8, 3], [8, 7, 7, 5], [1, 4, 5, 3],
            [7, 3, 4, 6], [7, 2, 7, 0], [6, 4, 9, 7],
            [2, 8, 5, 9], [5, 3, 5, 5], [9, 7, 3, 7],
            [9, 8, 2, 0], [4, 4, 6, 6], [2, 4, 1, 6],
            [0, 4, 7, 9], [5, 9, 2, 6], [1, 8, 7, 0],
            [5, 1, 5, 2], [3, 8, 0, 7], [5, 5, 8, 1],
            [5, 5, 0, 0], [1, 0, 5, 6], [5, 3, 9, 0],
            [5, 1, 7, 0], [0, 7, 8, 9], [0, 0, 6, 2],
            [3, 4, 0, 7], [4, 3, 9, 2], [6, 4, 4, 9],
            [7, 9, 3, 2], [0, 2, 4, 4], [8, 8, 3, 5],
            [3, 6, 7, 3], [8, 8, 4, 9], [7, 3, 0, 4],
            [5, 0, 0, 9], [2, 8, 2, 4], [3, 2, 3, 9],
            [2, 1, 5, 4], [5, 3, 5, 4], [6, 6, 3, 4],
            [5, 7, 9, 8], [9, 3, 2, 5], [1, 9, 5, 0],
            [1, 9, 1, 8], [6, 5, 8, 8], [4, 0, 0, 5],
            [0, 7, 0, 7], [0, 3, 1, 7], [7, 5, 9, 3],
            [5, 4, 1, 4], [5, 0, 7, 6], [4, 7, 9, 5],
            [9, 3, 2, 9], [0, 0, 6, 7], [5, 1, 4, 6],
            [3, 2, 0, 4], [6, 4, 9, 4], [4, 2, 5, 5],
            [4, 3, 0, 6], [6, 0, 6, 4], [2, 1, 1, 3],
            [1, 7, 2, 4], [8, 8, 9, 7], [9, 8, 3, 5],
            [3, 8, 9, 5], [9, 3, 6, 4], [9, 0, 0, 3],
            [1, 2, 9, 0], [6, 7, 6, 1], [3, 4, 3, 0],
            [5, 5, 8, 7], [9, 9, 1, 9], [2, 0, 5, 7],
            [1, 4, 7, 8], [1, 8, 5, 0], [4, 2, 6, 3],
            [8, 0, 4, 3], [5, 2, 0, 8], [5, 3, 6, 9],
            [9, 9, 7, 5], [1, 2, 8, 7], [0, 6, 2, 8],
            [8, 9, 1, 6], [6, 6, 0, 7], [2, 8, 1, 2],
            [6, 0, 4, 4], [5, 7, 1, 4], [1, 2, 2, 0],
            [2, 7, 8, 7], [0, 1, 7, 8], [7, 4, 4, 0],
            [3, 7, 9, 5], [7, 0, 6, 8], [8, 3, 5, 0],
            [5, 3, 8, 5], [2, 4, 6, 3], [5, 1, 8, 4],
            [5, 2, 9, 1], [2, 5, 5, 3], [7, 3, 3, 7],
            [1, 8, 5, 8], [3, 4, 8, 4], [6, 2, 0, 2],
            [5, 4, 8, 5], [3, 4, 5, 0], [2, 1, 8, 0],
            [3, 3, 6, 7], [6, 2, 9, 0], [2, 4, 3, 6],
            [2, 5, 2, 8], [4, 9, 9, 3], [5, 3, 3, 2],
            [2, 1, 0, 1], [4, 7, 4, 2], [5, 5, 1, 2],
            [2, 1, 5, 3], [0, 3, 0, 7], [1, 5, 7, 7],
            [1, 0, 2, 5], [2, 4, 7, 0], [8, 6, 3, 7],
            [4, 6, 3, 5], [1, 7, 5, 4], [2, 7, 1, 7],
            [9, 3, 5, 3], [1, 5, 0, 4], [1, 9, 6, 5],
            [2, 4, 7, 0], [8, 3, 0, 7], [9, 0, 3, 8],
            [9, 0, 3, 7], [1, 3, 2, 2], [6, 5, 1, 9],
            [7, 8, 4, 5], [2, 5, 0, 7], [3, 5, 7, 2],
            [6, 2, 9, 7], [0, 6, 5, 4], [7, 6, 5, 8],
            [7, 8, 8, 3], [1, 7, 3, 3], [2, 2, 1, 8],
            [9, 5, 8, 2], [9, 9, 5, 0], [6, 7, 4, 7],
            [4, 9, 5, 9], [6, 3, 1, 0], [3, 9, 6, 3],
            [7, 6, 0, 8], [7, 0, 2, 6], [7, 5, 7, 8],
            [8, 8, 5, 2], [2, 9, 6, 0], [3, 4, 2, 7],
            [9, 0, 5, 5], [5, 1, 4, 7], [5, 0, 8, 6],
            [5, 2, 9, 4], [9, 1, 0, 7], [5, 4, 7, 9],
            [3, 0, 6, 5], [0, 1, 7, 3], [7, 3, 9, 3],
            [8, 0, 5, 2], [6, 8, 2, 4], [9, 5, 1, 4],
            [5, 7, 5, 4], [2, 5, 9, 3], [5, 0, 2, 4],
            [7, 5, 1, 0], [3, 1, 4, 9], [1, 9, 9, 7],
            [7, 9, 3, 4], [1, 2, 4, 0], [3, 7, 0, 7],
            [4, 0, 6, 5], [3, 1, 3, 8], [8, 5, 9, 4],
            [5, 5, 5, 5], [7, 0, 2, 5], [4, 7, 5, 6],
            [1, 8, 7, 7], [9, 8, 5, 7], [0, 8, 1, 5],
            [0, 8, 0, 8], [2, 8, 1, 3], [8, 1, 5, 0],
            [4, 0, 5, 0], [8, 8, 8, 9], [2, 8, 4, 7],
            [2, 5, 9, 4], [6, 6, 5, 9], [6, 6, 6, 3],
            [5, 4, 4, 4], [4, 0, 3, 3]
        ]

# 检查日期和号码长度是否匹配
print(f"dates 长度: {len(dates)}")
print(f"numbers 长度: {len(numbers)}")

if len(dates) != len(numbers):
    difference = abs(len(dates) - len(numbers))
    if len(dates) > len(numbers):
        print(f"dates 比 numbers 长 {difference} 个条目。")
        # 你可以选择截断 dates 列表
        dates = dates[:len(numbers)]
        print(f"dates 已截断至 {len(dates)} 个条目以匹配 numbers。")
    else:
        print(f"numbers 比 dates 长 {difference} 个条目。")
        # 你可以选择截断 numbers 列表
        numbers = numbers[:len(dates)]
        print(f"numbers 已截断至 {len(numbers)} 个条目以匹配 dates。")

# 再次检查长度
print(f"截断后 dates 长度: {len(dates)}")
print(f"截断后 numbers 长度: {len(numbers)}")

assert len(dates) == len(numbers), "日期和号码列表长度不匹配！"

# 创建 DataFrame
df = pd.DataFrame({
    '日期': dates,
    '号码1': [num[0] for num in numbers],
    '号码2': [num[1] for num in numbers],
    '号码3': [num[2] for num in numbers],
    '号码4': [num[3] for num in numbers]
})

# 将日期转换为 datetime 对象
df['日期'] = pd.to_datetime(df['日期'], format='%Y/%m/%d')

# 按日期升序排序（从最早到最新）
df = df.sort_values('日期').reset_index(drop=True)

# 合并数据集并加入特征工程
df['月份'] = df['日期'].dt.month
df['日'] = df['日期'].dt.day
df['星期几'] = df['日期'].dt.weekday

# 创建滞后特征（前一期和前二期的号码）
for i in range(1, 5):
    df[f'前一期号码{i}'] = df[f'号码{i}'].shift(1)
    df[f'前二期号码{i}'] = df[f'号码{i}'].shift(2)

df = df.dropna().reset_index(drop=True)

# 增加交互特征和其他特征
df['号码1_号码2_乘积'] = df['号码1'] * df['号码2']
df['号码3_号码4_乘积'] = df['号码3'] * df['号码4']
df['号码1_号码4_和'] = df['号码1'] + df['号码4']

# 准备特征和目标变量
features = ['月份', '日', '星期几', '号码1_号码2_乘积', '号码3_号码4_乘积', '号码1_号码4_和'] + \
           [f'前一期号码{i}' for i in range(1, 5)] + [f'前二期号码{i}' for i in range(1, 5)]
X = df[features]
y = df[['号码1', '号码2', '号码3', '号码4']]


# 优化和预测函数
def optimize_and_predict(X, y, models, param_grids, predict_features):
    predictions = {}
    best_params = {}
    predict_features = np.array(predict_features).reshape(1, -1)

    tscv = TimeSeriesSplit(n_splits=5)

    # 对每一个目标变量（号码1、号码2、号码3、号码4）进行模型优化和预测
    for i in range(1, 5):
        y_i = y[f'号码{i}']
        best_model = None
        best_score = float('inf')
        best_param = None

        # 遍历不同模型和参数网格，寻找最佳模型和参数
        for model, param_grid in zip(models, param_grids):
            grid_search = GridSearchCV(model, param_grid, cv=tscv, scoring='neg_mean_squared_error')
            grid_search.fit(X, y_i)
            # 因为 scoring 是负均方误差，所以更大的值（更接近0）更好
            if -grid_search.best_score_ < best_score:
                best_score = -grid_search.best_score_
                best_model = grid_search.best_estimator_
                best_param = grid_search.best_params_

        # 训练最佳模型并预测
        best_model.fit(X, y_i)
        predictions[f'号码{i}'] = best_model.predict(predict_features)[0]
        best_params[f'号码{i}'] = best_param

    return predictions, best_params


# 定义模型和参数网格
models = [
    GradientBoostingRegressor(random_state=42),
    RandomForestRegressor(random_state=42),
    DecisionTreeRegressor(random_state=42),
    LinearRegression(),
    SVR(),
    KNeighborsRegressor(),
    AdaBoostRegressor(random_state=42)
]

param_grids = [
    {'n_estimators': [50, 100, 200], 'learning_rate': [0.05, 0.1], 'max_depth': [3, 5]},
    {'n_estimators': [50, 100, 200], 'max_depth': [3, 5]},
    {'max_depth': [3, 5, None]},
    {},
    {'C': [0.1, 1, 10], 'epsilon': [0.1, 0.2]},
    {'n_neighbors': [3, 5, 7]},
    {'n_estimators': [50, 100, 200]}
]

# 指定目标日期进行预测
# 你可以根据需要修改这个日期
target_date_str = "2024/12/30"
target_date = pd.to_datetime(target_date_str, format='%Y/%m/%d')

# 确保目标日期在数据范围之后
if target_date <= df['日期'].max():
    raise ValueError("目标日期必须在数据集的最新日期之后。")

# 提取目标日期的时间特征
predict_month = target_date.month
predict_day = target_date.day
predict_weekday = target_date.weekday()

# 获取最新两期的号码作为滞后特征
latest_entry = df.iloc[-1]
second_latest_entry = df.iloc[-2]

# 生成预测特征
predict_features = [
    predict_month,
    predict_day,
    predict_weekday
]

# 添加交互特征
predict_features += [
    latest_entry['号码1'] * latest_entry['号码2'],
    latest_entry['号码3'] * latest_entry['号码4'],
    latest_entry['号码1'] + latest_entry['号码4']
]

# 添加滞后特征
predict_features += latest_entry[[f'号码{i}' for i in range(1, 5)]].tolist()
predict_features += second_latest_entry[[f'号码{i}' for i in range(1, 5)]].tolist()

# 进行优化和预测
optimized_predictions, best_params = optimize_and_predict(X, y, models, param_grids, predict_features)

# 计算中位数作为最终预测结果
final_predictions = {key: int(round(value)) for key, value in optimized_predictions.items()}

# 输出最佳参数和最终预测结果
print("最佳参数：")
for key, params in best_params.items():
    print(f"{key}: {params}")

print("\n最终预测结果：")
print(final_predictions)

def get_history_data():
    """获取历史数据，供网页应用使用"""
    df = pd.DataFrame({
        '日期': dates,
        '号码1': [num[0] for num in numbers],
        '号码2': [num[1] for num in numbers],
        '号码3': [num[2] for num in numbers],
        '号码4': [num[3] for num in numbers]
    })
    df['日期'] = pd.to_datetime(df['日期'])
    df = df.sort_values('日期', ascending=False)
    
    return [
        {
            'date': row['日期'].strftime('%Y/%m/%d'),
            'numbers': [
                int(row['号码1']),
                int(row['号码2']),
                int(row['号码3']),
                int(row['号码4'])
            ]
        }
        for _, row in df.iterrows()
    ]

def predict_next():
    """预测下一期号码，供网页应用使用"""
    # 创建特征
    df = pd.DataFrame({
        '日期': dates,
        '号码1': [num[0] for num in numbers],
        '号码2': [num[1] for num in numbers],
        '号码3': [num[2] for num in numbers],
        '号码4': [num[3] for num in numbers]
    })
    df['日期'] = pd.to_datetime(df['日期'])
    df = df.sort_values('日期').reset_index(drop=True)
    
    # 特征工程
    df['月份'] = df['日期'].dt.month
    df['日'] = df['日期'].dt.day
    df['星期几'] = df['日期'].dt.weekday
    
    for i in range(1, 5):
        df[f'前一期号码{i}'] = df[f'号码{i}'].shift(1)
        df[f'前二期号码{i}'] = df[f'号码{i}'].shift(2)
    
    df = df.dropna().reset_index(drop=True)
    
    # 准备特征
    features = ['月份', '日', '星期几'] + \
               [f'前一期号码{i}' for i in range(1, 5)] + \
               [f'前二期号码{i}' for i in range(1, 5)]
    
    # 预测下一期
    next_date = df['日期'].max() + pd.Timedelta(days=1)
    predictions = []
    
    for i in range(1, 5):
        X = df[features]
        y = df[f'号码{i}']
        
        model = GradientBoostingRegressor(n_estimators=100, random_state=42)
        model.fit(X, y)
        
        # 准备预测特征
        pred_features = pd.DataFrame({
            '月份': [next_date.month],
            '日': [next_date.day],
            '星期几': [next_date.weekday()]
        })
        
        for j in range(1, 5):
            pred_features[f'前一期号码{j}'] = df.iloc[-1][f'号码{j}']
            pred_features[f'前二期号码{j}'] = df.iloc[-2][f'号码{j}']
        
        # 预测并取整
        pred = int(round(model.predict(pred_features)[0]))
        predictions.append(pred)
    
    return {
        'next_date': next_date.strftime('%Y/%m/%d'),
        'predictions': predictions
    }

if __name__ == '__main__':
    # 测试预测功能
    result = predict_next()
    print("预测结果：", result)
    
    # 测试历史数据功能
    history = get_history_data()
    print("\n最近的历史数据：")
    for entry in history[:5]:
        print(entry)
